[
    {
        "title": "0: Introduction",
        "description": [
            "The purpose of this app is to visualise and communicate the capabilities of the [Building Topology Ontology (BOT)](https://github.com/w3c-lbd-cg/bot). By default the data samples are queried as an in-memory graph using the [rdflib](https://www.npmjs.com/package/rdflib) library, but unfortnately this library has its shortcomings in terms of SPARQL capabilities. We therefor recommend running it on a [Stardog](https://www.stardog.com/) based endpoint.",
            "### Use a Stardog triplestore",
            "To use the app with a Stardog tripestore this must either be available online, or this app must be run in a local environment. To do the latter, simply clone the repository, install the dependencies with `npm install` (requires [node.js](https://nodejs.org/en/)) and run a development server with `ng serve` (requires [Angular CLI](https://cli.angular.io/)).",
            "With a local copy of the app running, make sure you have a Stardog running (defaults to port 5820) with an empty database (let's call it 'test'), so that you don't delete anything important. Then click the \"Switch to triplestore\" button and type in \"http://localhost:5820\" as endpoint and \"test\" as database. If you haven't changed the username and password they both default to \"admin\"."
        ],
        "query": "",
        "triples": ""
    },
    {
        "title": "1: A simple building",
        "description": [
            "Let's start as simple as it gets. A building with a single storey and a single space.\n",
            "The default query is a \"SELECT\" query which returns a table with all the spaces in the dataset, but if you change the \"`SELECT *`\" to \"`CONSTRUCT`\" it will instead return the part of the dataset that matches the query. `CONSTRUCT { ?s ?p ?o }` will return the full dataset.\n",
            "#### Challenges",
            "Try adding some more spaces to the dataset and re-run the query. Then try to add another storey with some more spaces.\n",
            "Try traversing the graph by adding some more statements to the query.",
            "#### Help",
            "A SPARQL query consists of triples (subject, predicate, object) to be matched, and by adding `?` as a suffix the triple component becomes a variable that will match anything.\n",
            "`?s rdf:type bot:Space` will therefore return anything that is an instance of `bot:Space`.\n",
            "A triple ends with (`.`), but if using (`;`) the first component of the triple will be reused in the next statement. \"`?s ?p ?o ; ?key ?value .`\" will therefore be interpreted the same as \"`?s ?p ?o . ?s ?key ?value .`\". (`,`) will repeat both the subject and the predicate of the previous triple, so \"`?s rdf:type bot:Space , bot:Zone .`\" is equal to \"`?s rdf:type bot:Space . ?s rdf:type bot:Zone .`\".\n",
            "As an abbreviation for `rdf:type`, (`a`) can be used. For example `?s a bot:Space .`"
        ],
        "query": [
            "PREFIX bot:  <https://w3id.org/bot#>",
            "PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n",
            "SELECT *",
            "WHERE {",
            "\t?s a bot:Space",
            "}"
        ],
        "triples": [
            "@prefix bot:  <https://w3id.org/bot#> .",
            "@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .",
            "@prefix inst: <https://example.org/projectXX/> .\n",

            "# INSTANCES",
            "inst:siteXX a bot:Site .",
            "inst:buildingA a bot:Building .",
            "inst:storey00 a bot:Storey .",
            "inst:spaceR-01 a bot:Space .\n",

            "# RELATIONS",
            "inst:siteXX bot:hasBuilding inst:buildingA .",
            "inst:buildingA bot:hasStorey inst:storey00 .",
            "inst:storey00 bot:hasSpace inst:spaceR-01 ."
        ]
    },
    {
        "title": "2: Elements",
        "description": "...",
        "query": [
            "PREFIX bot:  <https://w3id.org/bot#>",
            "PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n",
            "SELECT *",
            "WHERE {",
            "\t?s a bot:Space",
            "}"
        ],
        "triples": [
            "@prefix bot:  <https://w3id.org/bot#> .",
            "@prefix inst: <https://example.org/projectXX/> .",
            "@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n",
            
            "inst:buildingA a bot:Building ;",
            "\tbot:hasStorey inst:storey00 ,",
            "\t\tinst:storey01 .\n",
                                         
            "inst:storey00 a bot:Storey ;",
            "\tbot:hasSpace inst:space00aa ,",
            "\t\tinst:space00cg .\n",
                                       
            "inst:storey01 a bot:Storey .\n",
            
            "inst:space00aa a bot:Space ;",
            "\tbot:containsElement inst:heater235 ;",
            "\tbot:adjacentElement inst:wall443 ,",
            "\t\tinst:floor23 .\n",
                                               
            "inst:space00cg a bot:Space .",
            "inst:heater235 a bot:Element .",
            "inst:wall443 a bot:Element .",
            "inst:floor23 a bot:Element ."
        ]
    },
    {
        "title": "4: Proposal regarding space types",
        "description": [
            "This tab gives some proposals to the initial data structure to make life easier when working with space types.\n",
            "#### The following changes are proposed:",
            "* Space types also get a place in an ontology\n",
                "\t```sparql",
                "\tinst:spaceType1 rdf:type prop:SpaceType```",
            "* The relation between spaces and space types is made more clear\n",
                "\t```sparql",
                "\tinst:spaceA prop:hasSpaceType inst:spaceType1```",
            "* A hierarchy can exist between space types (generic-specific)\n",
                "\t```sparql",
                "\tinst:spaceType1 prop:subSpaceType inst:spaceType1-1```",
            "* The property type name will be made explicitly in an ontology.\n",
                "\t```sparql",
                "\tinst:propA rdf:type prop:Area```",
                "\tinstead of:\n",
                "\t```sparql",
                "\tinst:spaceA prop:Area inst:propA```",
            "* The above change makes it also possible to differentiate between properties only assigned to a specific space,",
            "and properties that are inherited via space types. The properties assigned directly to spaces and space types:\n",
                "\t```sparql",
                "\tinst:spaceA prop:hasProperty inst:propA",
                "\tinst:spaceType1 prop:hasProperty inst:propB```",
            "* and the inherited properties (added through an algorithm, see tab 6):",
                "```sparql",
                "\tinst:spaceA prop:hasInheritedProperty inst:propB```",  
            ""
        ],
        "triples": [
            "@prefix bot:  <https://w3id.org/bot#> .",
            "@prefix inst: <https://example.org/projectXX/> .",
            "@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .",
            "@prefix prop: <https://w3id.org/prop#> .",
            "@prefix opm:  <https://w3id.org/opm#> .",
            "@prefix prov: <http://www.w3.org/ns/prov#> .",
            "@prefix cdt:  <http://w3id.org/lindt/custom_datatypes#> .",
            "@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\n",
 
            "### BUILDING OWNER",
            "# step 1a: make space types and assign properties",
            "inst:spaceType1 a prop:SpaceType ;",
                "\trdfs:label \"Computerroom type 1\" .",
            "inst:spaceType1-1 a prop:SpaceType ;",
                "\tprop:hasProperty inst:propH ;",
                "\trdfs:label \"Computerroom type 1-1\" .\n",

            "# Step 1b: hierarchy of spaces",
            "inst:spaceType1 prop:subSpaceType inst:spaceType1-1 .\n",

            "# step 1c: assign propertie values and state",
            "inst:propH a opm:Requirement , prop:Cost ;",
                "\topm:hasState[ a opm:CurrentState ;",
                    "\t\topm:maximumValue \"500 euros\" ;",
                    "\t\tprov:generatedAtTime \"2017-11-23T13:35:22Z\" ] .",
            "inst:propJ a opm:Requirement , prop:AirChangeRate ;",
                "\topm:hasState[ a opm:CurrentState ;",
                    "\t\topm:maximumValue \"5 1/h\" ;",
                    "\t\tprov:generatedAtTime \"2017-11-23T13:35:23Z\" ] .\n",

            "# step 2: make spaces from space types",
            "inst:spaceA a bot:Space ;",
                "\tprop:hasSpaceType inst:spaceType1-1 .\n",

            "# step 3: add instance properties to the space individual",
            "inst:spaceA prop:hasProperty inst:propJ .\n",

            "# An algorithm will check which properties should be inherited",
            "# from most generic space type to most specific space type.",
            "# This results in:",
            "inst:spaceA prop:hasInheritedProperty inst:propH ."
        ],
        "query": [
            "PREFIX bot:  <https://w3id.org/bot#>",
            "PREFIX inst: <https://example.org/projectXX/>",
            "PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>",
            "PREFIX prop: <https://w3id.org/prop#>",
            "PREFIX opm:  <https://w3id.org/opm#>",
            "PREFIX prov: <http://www.w3.org/ns/prov#>",
            "PREFIX cdt:  <http://w3id.org/lindt/custom_datatypes#>\n",

            "CONSTRUCT\n",

            "WHERE {",
                "?s ?p ?o",
            "}"
        ]
    },
    {
        "title": "5: Use SPARQL CONSTRUCT to simplify properties",
        "description": [
            "The graph visualisation for larger use cases can be quite overwhelming and complex. Use adapted SPARQL CONSTRUCT to go directly from:",
                "```sparql",
                "\tinst:spaceA prop:hasProperty inst:propA .",
                "\tinst:propA a opm:Required , prop:Area ;",
                "\topm:hasState[ a opm:CurrentState ;",
                    "\t\topm:maximumValue \"20 m²\" ;",
                    "\t\tprov:generatedAtTime \"2017-11-23T13:35:23Z\" ] .",
                "\tinst:spaceA prop:hasInheritedProperty inst:propB .",
                "\tinst:propA a opm:Required , prop:Occupancy ;",
                "\topm:hasState[ a opm:CurrentState ;",
                    "\t\topm:maximumValue \"10\" ;",
                    "\t\tprov:generatedAtTime \"2017-11-22T13:35:23Z\" ] .```",
            "to:",
                "```sparql",
                "\tinst:spaceA prop:Area \"20 m²\" .",
                "\tinst:spaceA prop:Occupancy \"10\" .```",
            "with only the most recent value of the properties, based on opm:CurrentState. The same can be done for properties of space types. At this point, the information indicating that the value is a minimum, maximum or exact value (see OPM) not visualized. This can be resolved by adding this information to the object property name. Information on the fact if the property is inherited or not, a requirement or a designed property is also not visualized.",
            "#### Remark: the local rdfstore cannot handle '|' in a SPARQL query. You should switch in the app to the Stardog triplestore to execute this query."
        ],
        "triples": [
            "@prefix bot:  <https://w3id.org/bot#> .",
            "@prefix inst: <https://example.org/projectXX/> .",
            "@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .",
            "@prefix prop: <https://w3id.org/prop#> .",
            "@prefix opm:  <https://w3id.org/opm#> .",
            "@prefix prov: <http://www.w3.org/ns/prov#> .",
            "@prefix cdt:  <http://w3id.org/lindt/custom_datatypes#> .",
            "@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\n",
 
            "### BUILDING OWNER",
            "# step 1a: make space types and assign properties",
            "inst:spaceType1 a prop:SpaceType ;",
                "\trdfs:label \"Computerroom type 1\" .",
            "inst:spaceType1-1 a prop:SpaceType ;",
                "\tprop:hasProperty inst:propH ;",
                "\trdfs:label \"Computerroom type 1-1\" .\n",

            "# Step 1b: hierarchy of spaces",
            "inst:spaceType1 prop:subSpaceType inst:spaceType1-1 .\n",

            "# step 1c: assign propertie values and state",
            "inst:propH a opm:Requirement , prop:Cost ;",
                "\topm:hasState[ a opm:CurrentState ;",
                    "\t\topm:maximumValue \"500 euros\" ;",
                    "\t\tprov:generatedAtTime \"2017-11-23T13:35:22Z\" ] .",
            "inst:propJ a opm:Requirement , prop:AirChangeRate ;",
                "\topm:hasState[ a opm:CurrentState ;",
                    "\t\topm:maximumValue \"5 1/h\" ;",
                    "\t\tprov:generatedAtTime \"2017-11-23T13:35:23Z\" ] .\n",

            "# step 2: make spaces from space types",
            "inst:spaceA a bot:Space ;",
                "\tprop:hasSpaceType inst:spaceType1-1 .\n",

            "# step 3: add instance properties to the space individual",
            "inst:spaceA prop:hasProperty inst:propJ .\n",

            "# An algorithm will check which properties should be inherited",
            "# from most generic space type to most specific space type.",
            "# This results in:",
            "inst:spaceA prop:hasInheritedProperty inst:propH ."
        ],
        "query": [
            "PREFIX bot:  <https://w3id.org/bot#>",
            "PREFIX inst: <https://example.org/projectXX/>",
            "PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>",
            "PREFIX prop: <https://w3id.org/prop#>",
            "PREFIX opm:  <https://w3id.org/opm#>",
            "PREFIX prov: <http://www.w3.org/ns/prov#>",
            "PREFIX cdt:  <http://w3id.org/lindt/custom_datatypes#>\n",

            "CONSTRUCT { ?space ?propertyName ?propertyValue . }\n",

            "WHERE {",
                "\t?space a bot:Space ;",
                    "\t\tprop:hasProperty|prop:hasInheritedProperty ?prop .",
                "\t?prop a ?propertyName ;",
                    "\t\topm:hasState ?bnodeState .",
                "\t?bnodeState a opm:CurrentState ;",
                    "\t\topm:minimumValue|opm:maximumValue|opm:value ?propertyValue .", 
                "\tFILTER ( ?propertyName != <https://w3id.org/opm#Requirement> )",
            "}"
        ]
    },
    {
        "title": "6.0: Proposal for inheritance of space type properties: introduction",
        "description": [
            "Initial situation: multiple space types of which some are ordered hierarchical. The properties of the space types are only connected to themselves. In the next phases under tab 6, the properties will be inherited from the most generic space types to the most specific space types. In a final step, the properties of the space type assigned to a specific space, will be inherited by the space."
        ],
        "triples": [
            "@prefix bot:  <https://w3id.org/bot#> .",
            "@prefix inst: <https://example.org/projectXX/> .",
            "@prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .",
            "@prefix prop: <https://w3id.org/prop#> .",
            "@prefix opm:  <https://w3id.org/opm#> .",
            "@prefix prov: <http://www.w3.org/ns/prov#> .",
            "@prefix cdt:  <http://w3id.org/lindt/custom_datatypes#> .",
            "@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\n",
 
            "### BUILDING OWNER",
            "# step 1a: make space types and assign properties",
            "inst:spaceType1 a prop:SpaceType ;",
                "\tprop:hasProperty inst:propF ;",
                "\trdfs:label \"Computerroom type 1\" .",
            "inst:spaceType1-1 a prop:SpaceType ;",
                "\tprop:hasProperty inst:propH ;",
                "\trdfs:label \"Computerroom type 1-1\" .",
            "inst:spaceType1-1-1 a prop:SpaceType ;",
                "\trdfs:label \"Computerroom type 1-1-1\" .",
            "inst:spaceType1-2 a prop:SpaceType ;",
                "\tprop:hasProperty inst:propG ;",
                "\trdfs:label \"Computerroom type 1-2\" .\n",

            "inst:spaceType2 a prop:SpaceType ;",
                "\tprop:hasProperty inst:propA , inst:propB , inst:propE ;",
                "\trdfs:label \"Classrooms type 2\" .",
            "inst:spaceType2-1 a prop:SpaceType ;",
                "prop:hasProperty inst:propD ;",
                "\trdfs:label \"Classrooms type 2-1\" .\n",

            "inst:spaceType3 a prop:SpaceType ;",
                "\tprop:hasProperty inst:propI ;",
                "\trdfs:label \"Toilet type 3\" .\n",

            "# Step 1b: hierarchy of spaces",
            "inst:spaceType1 prop:subSpaceType inst:spaceType1-1 , inst:spaceType1-2 .",
            "inst:spaceType1-1 prop:subSpaceType inst:spaceType1-1-1 .\n",
            
            "inst:spaceType2 prop:subSpaceType inst:spaceType2-1 .\n",

            "# step 1c: assign propertie values and state",
            "inst:propA a opm:Requirement , prop:Area ;",
            "opm:hasState[ a opm:Required ;",
                "\topm:minimumValue \"12 m2\" ;",
                "\tprov:generatedAtTime \"2018-01-01T13:35:23Z\" ] ;",
            "opm:hasState[ a opm:CurrentState ;",
                "\topm:minimumValue \"13 m2\" ;",
                "\tprov:generatedAtTime \"2018-01-03T13:35:23Z\" ] .\n",
        
            "inst:propB a opm:Requirement , prop:Occupancy ;",
                "\topm:hasState[ a opm:CurrentState ;",
                    "\t\topm:maximumValue \"10\" ;",
                    "\t\tprov:generatedAtTime \"2017-12-23T13:35:23Z\" ] .\n",
            
            "inst:propC a opm:Requirement , prop:Area ;",
                "\topm:hasState[ a opm:CurrentState ;",
                    "\t\topm:minimumValue \"16 m2\" ;",
                    "\t\tprov:generatedAtTime \"2018-01-02T13:35:23Z\" ] .\n",
            
            "inst:propD a opm:Requirement , prop:Occupancy ;",
                "\topm:hasState[ a opm:CurrentState ;",
                    "\t\topm:maximumValue \"20\" ;",
                    "\t\tprov:generatedAtTime \"2018-01-02T13:45:23Z\" ] .\n",
            
            "inst:propE a opm:Requirement , prop:AirChangeRate ;",
                "\topm:hasState[ a opm:CurrentState ;",
                    "\t\topm:maximumValue \"4 1/h\" ;",
                    "\t\tprov:generatedAtTime \"2018-01-04T13:45:23Z\" ] .\n",
            
            "inst:propF a opm:Requirement , prop:Cost ;",
                "\topm:hasState[ a opm:CurrentState ;",
                    "\t\topm:maximumValue \"1000 euro\" ;",
                    "\t\tprov:generatedAtTime \"2017-11-23T13:35:23Z\" ] .",
            "inst:propG a opm:Requirement , prop:Cost ;",
                "\topm:hasState[ a opm:CurrentState ;",
                    "\t\topm:maximumValue \"2000 euro\" ;",
                    "\t\tprov:generatedAtTime \"2017-11-23T13:35:23Z\" ] .",
            "inst:propH a opm:Requirement , prop:Cost ;",
                "\topm:hasState[ a opm:CurrentState ;",
                    "\t\topm:maximumValue \"500 euro\" ;",
                    "\t\tprov:generatedAtTime \"2017-11-23T13:34:23Z\" ] .",
            "inst:propI a opm:Requirement , prop:Volume ;",
                "\topm:hasState[ a opm:CurrentState ;",
                    "\t\topm:maximumValue \"10 m³\" ;",
                    "\t\tprov:generatedAtTime \"2017-11-23T13:35:23Z\" ] .",
            "inst:propJ a opm:Requirement , prop:AirChangeRate ;",
                "\topm:hasState[ a opm:CurrentState ;",
                    "\t\topm:maximumValue \"5 1/h\" ;",
                    "\t\tprov:generatedAtTime \"2017-11-23T13:36:23Z\" ] .\n",

            "# step 2: make spaces from space types",
            "inst:spaceA a bot:Space ;",
                "\tprop:hasSpaceType inst:spaceType2-1 .\n",

            "# step 3: add instance properties to the space individual",
            "inst:spaceA prop:hasProperty inst:propJ .\n"
        ],
        "query": [
            "PREFIX bot:  <https://w3id.org/bot#>",
            "PREFIX inst: <https://example.org/projectXX/>",
            "PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>",
            "PREFIX prop: <https://w3id.org/prop#>",
            "PREFIX opm:  <https://w3id.org/opm#>",
            "PREFIX prov: <http://www.w3.org/ns/prov#>",
            "PREFIX cdt:  <http://w3id.org/lindt/custom_datatypes#>\n",

            "CONSTRUCT \n",

            "WHERE {",
                "\t?space a bot:Space .",
                "# space types",
                "?start a prop:SpaceType .",
                "FILTER NOT EXISTS { ?otherSpaceType prop:subSpaceType ?start }\n",
                "?end a prop:SpaceType .",
                "FILTER NOT EXISTS { ?end prop:subSpaceType ?otherSpaceType2}\n",
                "?start prop:subSpaceType+ ?mid .",
                "?mid prop:subSpaceType* ?end .",
            "}"
        ]
    }
]